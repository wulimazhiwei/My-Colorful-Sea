1、修改Apache配置文件而不生效、MySQL起不来的问题（2017年10月25日）
  
  前几天碰到了两个问题，一个是数据库服务起不来，另一个是修改Apache配置文件不生效。这两个问题都具有一个共性，那就是老的进程还没有彻底结束，有新的请求
进来时仍然有可能会被老进程处理，这时候就不是我们想要的结果。即使停掉了数据库服务，但老的数据库服务进程还在后台跑，此时就无法重启数据库，需要将老进程杀
掉才行；同样的Apache老的进程仍然会按照老的配置运行，即使修改了配置文件也重启了服务，也会存在新的请求被老进程处理的情况，处理方法同上。

2、接口被攻击，直接造成损失

  2017年11月8日下午3点，Twilio账户又没钱了，运营的同学反映早上充过一次，这才下午就没钱了，有点异常。后台这边赶紧查询五个应用是哪个应用消耗过快，而
对于我们的应用消耗行为无非就是打电话和发短信。于是就立刻查询数据库看看是哪个应用打电话比较频繁，但结果是都很正常，频率都属于正常的范围。后来想到通过
Twilio Console去发现一些什么，通过主账户的账单可以得知各个子账号的消费情况，“https://www.twilio.com/console/usage/subaccounts”，我的方法
是，隔个几十秒或者一分钟去刷新一下这个页面，看看各个子账户的消费总额变动情况，看看哪个账户增加的比较多。最后比对出是iOS WeCall变动最快，增长最多。于
是再分别去看是打电话还是发短信异常，最终确定为该应用的请求验证码的接口出现了问题，该接口用到了Twilio的发短信功能，而有人不断的在请求这个接口，导致在
不断地消耗钱。

用户通过如下手机号模拟验证码请求：
+86　18062542370　　湖北 武汉  中国电信

分别从如下三台服务器发起攻击
IP地址　／　所属区域　／　攻击次数
107.150.18.191　／　美国.quadranet.com　／　7207 + 5094 = 12301
103.82.53.176　／　香港特别行政区　／　9923 +　1943　＝　11866
58.49.117.116　／　湖北省武汉市/电信　／　25 + 507  = 532

合计大概2万4千多短信验证码请求是攻击性行为，消耗在500$左右，
后台在下午5:40左右紧急发布了一个补丁，目前看临时解决了这个问题，
后台后继会重点考虑如何增加风险预警策略，比如合理控制用户最大每天的消费行为。

3、打电话功能平时测试都很正常，但到高峰期间总会出现电话监控脚本就会打不通电话（2017-12-08）
  问题根源查找过程：首先找到电话监控脚本打不通电话的call log，发现电话还未使用<Dail>拨出就被拒绝掉了--<Hangup schedule="1" reason="rejected"/>，
查看源代码发现这句话出现在数据库无法连接时返回的，初步判定高峰时期数据库可能连接不上。随后查看mysql错误日志（/var/log/mysql/error.log），发现报出
错误“Can't create thread to handle request (errno= 11)，[ERROR] Error log throttle:57 'Can't create thread to handle new 
connection' error(s) suppressed”，意思是无法创建新的线程去处理新的链接，那么进而判定可能是达到了mysql的最大连接数。紧接着去查看数据库最大连接数(
show variables like 'max_connections';)，结果返回是1000个，心想1000个也不少了，怎么还会达到最大连接数呢？于是去查看系统资源，free命令查看内存
使用情况，发现内存不是很充分了，如果系统内存不足，性能就会受到影响，请求进来时数据库无法及时处理，就会导致线程池被占满，从而达到最大连接数。同时再查看
mysql正在运行的线程（show full processlist;），没有特别耗时的sql在执行，因此不是sql效率的问题。如果有比较耗时的sql，就需要优化sql效率了。
  解决办法：系统内存扩容。sql查询效率优化。适当提高MySQL最大连接数。

4、sql注入导致的损失
从技术层面上如何发现并解决问题的：
起因：2018年1月5日晚上，运营提出说iOS FreeCall Plivo账户消耗异常，主要是发短信异常，是平常的十几倍，造成了几百美元的损失。

原因：后台接口参数处理不规范，没有对sql注入做处理。

过程：根据从Plivo导出的发短信的表格来看，每条短信的发送间隔时间没有规律可寻，每条短信的发送间隔都不固定，不像是那种被攻击的行为-----一般被攻击时都
是由脚本发起，执行时间间隔相对固定，所以判断可能不是被攻击了。然后后台查询请求记录，最终在app15服务器上发现有大量的请求，就1月5日一天就有2500条左右
的请求，其中有个用户特别频繁，IP：94.130.160.40，IP地址在菲律宾，有2145条记录，因此断定此用户有异常。紧接着去查询接口执行日志，最终发现最为频繁的
用户是AN263836，查询余额发现有9w多美金，绑定手机号码为639152220140，也是菲律宾的号码。但是去查询充值记录时，除去正常获取的6美金的记录之外没有任何
充值记录。5号晚上没有发现问题在哪，只做了简单的处理，屏蔽此号码的打电话和短信功能。6号上午进一步查询原因。在观看日志记录时又发现了几个用户在频繁发短
信，查询余额同样也没查到。然后进一步去查当时发现的发短信的用户，在那个时间点的详细日志，发现了一个可疑的sql语句，
UPDATE CR_USERS set name_enable = '', credit='5' where uid='AN404216';这个语句一眼便认出是匿名设置接口里面的，但没有 ,credit='5' 这
些内容。初步怀疑可能是接口文件被人修改，但是又看了一部分更奇怪的日志，这些日志的sql语句不符合语法规范，所以可能这个人不懂MySQL，极大的可能是他在调试
接口，传的参数很特殊，导致这种不规范的sql，所以就想到了sql注入，于是修改接口，把参数打印出来。最终确认确实是sql注入，更新用户匿名设置的参数传
了,credit='5，这就正好让数据库执行sql时执行了UPDATE CR_USERS set name_enable = '', credit='5' where uid='AN404216';这就把余额更新了。

补救措施：正常的传参是不会带有逗号和等号的，因此接口增加了这两个字符的判断，如果包含就退出。这样能有效防止sql注入带来的问题。

对sql防注入的两点启示：
①在接口返回中尽量不要返回数据库原字段，尽量换个名字，这样不易被猜出来。
②对接口中传的参数不要直接使用，尤其是在更新用户信息的时候。即使使用也要做一些恰当的处理，比如正常来讲参数是不会包含逗号或者等号的，因此如果参数中有
这两个就要小心了。

  
