
1、存储过程（Stored Procedure）是一组为了完成特定功能的SQL语句集，经编译后存储在数据库中，用户通过指定存储过程的名字并给定参数（如果该存储过程
带有参数）来调用执行它。存储过程是可编程的函数，在数据库中创建并保存，可以由SQL语句和控制结构组成。当想要在不同的应用程序或平台上执行相同的函数，或
者封装特定功能时，存储过程是非常有用的。数据库中的存储过程可以看做是对编程中面向对象方法的模拟，它允许控制数据的访问方式。

2、语法
  CREATE PROCEDURE  过程名([[IN|OUT|INOUT] 参数名 数据类型[,[IN|OUT|INOUT] 参数名 数据类型…]]) [特性 ...] 过程体
  DELIMITER //
    CREATE PROCEDURE myproc(OUT s int)
      BEGIN
        SELECT COUNT(*) INTO s FROM students;
      END
      //
  DELIMITER ;
  
3、分隔符
  MySQL默认以";"为分隔符，如果没有声明分割符，则编译器会把存储过程当成SQL语句进行处理，因此编译过程会报错，所以要事先用“DELIMITER //”声明当前段
  分隔符，让编译器把两个"//"之间的内容当做存储过程的代码，不会执行这些代码；“DELIMITER ;”的意为把分隔符还原。

4、参数
  存储过程根据需要可能会有输入、输出、输入输出参数，如果有多个参数用","分割开。MySQL存储过程的参数用在存储过程的定义，共有三种参数类型,IN,OUT,INOUT:
    *IN参数的值必须在调用存储过程时指定，在存储过程中修改该参数的值不能被返回，为默认值
    *OUT:该值可在存储过程内部被改变，并可返回
    *INOUT:调用时指定，并且可被改变和返回
    
5、过程体
  过程体的开始与结束使用BEGIN与END进行标识。
  
6、变量
  --变量定义： DECLARE l_date date DEFAULT '1999-12-31';
  --变量赋值： SET xxx='Goodbye Cruel World';
  --用户变量： SET @y='Goodbye Cruel World';
  注意:
    ①用户变量名一般以@开头
    ②滥用用户变量会导致程序难以理解及管理

7、存储过程的管理
  --调用：call Set_Partition();
  --查询：select name from mysql.proc where db=’数据库名’;
        select routine_name from information_schema.routines where routine_schema='数据库名';
        show procedure status where db='数据库名';
        SHOW CREATE PROCEDURE 数据库.存储过程名;
  --修改：ALTER PROCEDURE Set_Partition
        更改用CREATE PROCEDURE 建立的预先指定的存储过程，其不会影响相关存储过程或存储功能。
  --删除：DROP PROCEDURE Set_Partition
  
8、示例：

* 每隔15天执行一次
/* 程序功能：循环使用分区，每半个月一个分区，保留6个月的数据
 时间：2010-11-09 */
 drop procedure if exists Set_Partition;
 DELIMITER //
 create procedure Set_Partition()
 begin
/* 事务回滚，其实放这里没什么作用，ALTER TABLE是隐式提交，回滚不了的。*/
    declare exit handler for sqlexception rollback;
    start TRANSACTION;
 
/* 到系统表查出这个表的最大分区，得到最大分区的日期。在创建分区的时候，名称就以日期格式存放，方便后面维护 */
    select REPLACE(partition_name,'p','') into @P12_Name from INFORMATION_SCHEMA.PARTITIONS where 
    TABLE_SCHEMA='mydb_1' and table_name='terminal_parameter' order by partition_ordinal_position DESC limit 1;

/* 判断最大分区的时间段，如果是前半个月的，那么根据情况需要加13,14,15,16天
   如果是后半个月的，那么直接加15天。 +0 是为了把日期都格式化成YYYYMMDD这样的格式*/
    IF (DAY(@P12_Name)<=15) THEN
       CASE day(LAST_DAY(@P12_name))
          WHEN 31 THEN set @Max_date= date(DATE_ADD(@P12_Name+0,INTERVAL 16 DAY))+0 ;
          WHEN 30 THEN set @Max_date= date(DATE_ADD(@P12_Name+0,INTERVAL 15 DAY))+0 ;
          WHEN 29 THEN set @Max_date= date(DATE_ADD(@P12_Name+0,INTERVAL 14 DAY))+0 ; 
          WHEN 28 THEN set @Max_date= date(DATE_ADD(@P12_Name+0,INTERVAL 13 DAY))+0 ; 
       END CASE;
    ELSE
       set @Max_date= date(DATE_ADD(@P12_Name+0, INTERVAL 15 DAY))+0;
    END IF;

/* 修改表，在最大分区的后面增加一个分区，时间范围加半个月 */
    SET @s1=concat('ALTER TABLE terminal_parameter ADD PARTITION (PARTITION p',@Max_date,' VALUES LESS THAN 
    (TO_DAYS (''',date(@Max_date),''')))');
    
    PREPARE stmt2 FROM @s1;
    EXECUTE stmt2;
    DEALLOCATE PREPARE stmt2;

/* 取出最小的分区的名称，并删除掉 。
    注意：删除分区会同时删除分区内的数据，慎重 */
    select partition_name into @P0_Name from INFORMATION_SCHEMA.PARTITIONS where TABLE_SCHEMA='mydb_1' and 
    table_name='terminal_parameter' order by partition_ordinal_position limit 1;
    
    SET @s=concat('ALTER TABLE terminal_parameter DROP PARTITION ',@P0_Name);
    PREPARE stmt1 FROM @s; 
    EXECUTE stmt1; 
    DEALLOCATE PREPARE stmt1; 

/* 提交 */
    COMMIT ;
 end;
 //
 DELIMITER ;
 
 9、计划任务执行
 
  DROP EVENT IF EXISTS e_Callfree_Set_Partition;
  CREATE EVENT e_Callfree_Set_Partition 
  ON SCHEDULE EVERY 1 day STARTS TIMESTAMP '2017-11-21 03:05:14'  
  ON COMPLETION PRESERVE 
  DO 
	  call Callfree_Set_Partition();

10、动手实践
https://github.com/wulimazhiwei/My-Colorful-Sea/blob/master/MySQL/stored_procedure.txt

11、如果计划任务没执行

SHOW VARIABLES LIKE 'event_scheduler';
如果返回的是off表示当前是关闭状态，如果是on当前已经开启了计划任务。
开启event_scheduler sql指令：
    set global event_scheduler =1;
关闭event_scheduler sql指令：
    set global event_scheduler =0;
