1、Percona XtraDB Cluster是MySQL高可用性和可扩展性的解决方案。
2、特点：①数据一致性，每个节点都包含完整的数据副本。 
       ②断点可用性，可以在任何时间点失去任何节点，但是集群将照常工作。
       ③良好的读负载扩展，任意节点都可以查询。
3、缺点：①加入新节点，开销大。需要复制完整的数据。
       ②不能有效的解决写缩放问题，所有的写操作都将发生在所有节点上。
       ③有多少个节点就有多少重复的数据。
4、分布式系统的CAP理论。Percona XtraDB Cluster: 一致性和可用性
        C---一致性，所有节点的数据一致。
        A---可用性，一个或多个节点失效，不影响服务请求。
        P---分区容忍性，节点间的连接失效，仍然可以处理请求。
5、节点数量为什么要大于3个且是奇数？因为当有一半以上的节点数在工作中的时候，集群才对外服务。和投票类似，必须要奇数个才能分出胜负。
6、随着集群越来越庞大,性能,可靠性和吞吐量会越来越好. 较小规模的部署会危及系统的容错性和可用性。
7、整个集群的写入吞吐量是由最弱的节点限制，如果有一个节点变得缓慢，那么整个集群将是缓慢的。为了稳定的高性能要求，所有的节点应使用统一的硬件。
8、集群是由节点组成的，每个节点都是普通的mysql/percona服务器，可以将现有的数据库服务器组成集群，反之，也可以将集群拆分成单独的服务器。
9、优化MySQL配置（/etc/mysql/percona-xtradb-cluster.conf.d/mysqld.cnf）
       参考网址：http://blog.csdn.net/china_world/article/details/36702761
       优化配置：
       . wsrep_provider: 这个参数指定Galera库的路径和文件名。这是一个必需的参数。
       . wsrep_cluster_address: 这个参数通过一种特殊的 gcomm:// 协议地址来访问集群中的节点。这是一个必需的参数。
       . wsrep_cluster_name: 这个参数为使用中的集群指定名称。
       . wsrep_sst_method: 这个参数定义了一种执行初始状态传输的方法。如果不指定的话，默认值是mysqldump，推荐设置为rsync或xtrabackup。
       . wsrep_node_address: 这个参数指定节点的IP地址。如果不指定值，默认使用获取到的第一个IP地址。这对于那些多个网络连接的网络配置环境
       而言是不理想的选择。
       . wsrep_node_name: 这个参数表示一个自燃语言下可读的节点名。如果不指定值，默认值是节点的主机名。
       . wsrep_slave_threads: 这个参数指定可并行运行的从节点线程数量。推荐设置为4。
       . wsrep_provider_options：这个参数用来指定不同的其他选项。推荐将gcache_size设置为接近最大吞吐量。
10、各种节点说明：
管理(MGM)节点：这类节点的作用是管理MySQL  Cluster内的其他节点，如提供配置数据、启动并停止节点、运行备份等。由于这类节点负责管理其他节
点的配置，应在启动其他节点之前首先启动这类节点。MGM节点是用命令“ndb_mgmd”启动的。 

数据(NDB)节点：这类节点用于保存Cluster的数据。数据节点的数目与副本的数目相关，是片段的倍数。例如，对于两个副本，每个副本有两个片段，那么就有
4个数据节点。不过没有必要设置多个副本。数据节点是用命令“ndbd”启动的。 

客户(SQL)节点：这是用来访问Cluster数据的节点。对于MySQL Cluster，客户端节点是使用NDB Cluster 存储引擎的传统MySQL服务器。通常，SQL节点
是使用命令“mysqld -ndbcluster”启动的，或将“ndbcluster”添加到“my.cnf”后使用“mysqld”启动。 

注释：在很多情况下，术语“节点”用于指计算机，但在讨论MySQL Cluster时，它表示的是进程。在单台计算机上可以有任意数目的节点，为此，我们采用术
语“Cluster主机”。 

11、 MySQL Cluster基本管理与维护
MySQL Cluster的管理和普通的MySQL Server管理区别较大，基本上大部分管理工作都是在管理节点上面完成，仅有少数管理内容需要在其他节点实施。
①各节点启动与关闭

要想Cluster环境能够正常工作，只好要启动一个NDB节点和一个SQL节点，另外为了完成管理，也至少要启动一个管理节点。各类节点的启动顺序也有要求，
首先是管理节点，然后是NDB节点，最后才是SQL节点。

1) 按顺序启动各节点：
a、 启动管理节点： 
[root@localhost MySQL-cluster]# ndb_mgmd -f /var/lib/MySQL- cluster/config.ini 
这里执行的ndb_mgmd命令实际上就是MySQL Cluster管理服务器，可以通过-f config_file_name或者--config=config_filename来指定MySQL Cluster
集群的参数文件。 
如果想了解更多关于ndb_mgmd的参数信息，可以通过运行ndb_mgmd --help来获取更详细的信息。 
b、 启动用于存储数据的ndb节点要启动存储节点，必须在每一台ndb节点主机上面都执行ndbd程序，如果是第一次启动，则需要添加--initial参数，以便进行
ndb节点的初始化工作。但是，在以后的启动过程中，是不能添加该参数的，否则ndbd程序会清除在之前建立的所有用于恢复的数据文件和日志文件。启动命令如下 
root@ndb1:/root>ndbd --initial 
c、 启动SQL节点 
SQL节点的启动和普通MySQL Server的启动没有太多明显的差别，不过有一个前提就是需要在MySQL Server的配置文件my.cnf设置好[MySQL_cluster]配置
组中的ndb-connectstring参数和[MySQLd]配置组中的ndbcluster参数。 
root@mysql1:/root>MySQLd_safe --user=MySQL 
