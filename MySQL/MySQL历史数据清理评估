# MySQL历史数据清理评估
# 以Android CallFree应用的CREDIT表为例：

一、为何清理历史数据
  ①占用大量磁盘空间
  ②数据量大（1760w条数据），未使用分区，业务效率会存在问题
  ③重构此表，建立分区表，便于以后维护
  
二、如何清理
  ①创建一个和原表表结构一致的新表，按天建立分区。
  ②rename表名（瞬间完成，耗时不计），将新表投入使用，旧表暂停。并备份旧表。
  ③将旧表中最近一周的数据（约62w条数据）填充至新表中，耗时估计5分钟。
  ④陆续将最近5个月的数据（月700w条数据）导入至新表中。耗时无法预估。
  ⑤删除旧表。
  
三、好处/坏处
  ①这样做的好处是不需要暂停业务，线上功能正常运行，数据库中新表旧表无缝切换。
  ②在导入最近一周数据的期间，《不会造成多送金币的情况》，但对用户最近24小时内获取次数或者金额的限制或者告警内容会无法准确把控，下面有详细说明，
  数据导入完成后限制便会生效。
  
四、有何影响
  ①该表是挣取金币以及花钱购买金币的明细表，涉及的接口有看广告、看视频、任务墙、新用户赠送、推送赠送和获取充值记录这些接口。
  ②其中看广告、看视频、任务墙、新用户赠送、推送赠送接口中涉及用户最近24小时内获取次数或者金额的限制或者告警内容；
    获取充值记录涉及用户最近500次充值记录的查询。
  ③因此，如果对表进行上述处理，在这5分钟内，看广告、看视频、任务墙、新用户赠送、推送赠送接口中涉及的用户最近24小时内获取次数或者金额的限制或者
  告警内容会无法准确把控，《不会造成多送金币的情况》。  获取充值记录涉及的用户最近500次充值记录的查询，《无法查询到历史记录》，最近一周的数据导入后，
  最近一周之前的历史记录无法查询，直到最近5个月的数据导入至新表中之后可以查询最近5个月的记录，最近5个月以前的数据无法查询。

五、实施时间
  产品/运营是否对此方案有疑问或者其他建议？默认没有。
  预计下周一开始实施，如果有优先级较高的需求，时间往后顺延。后台会做好模拟，确保无误。

六、具体实施步骤
  ①创建新表，按天建立分区
  CREATE TABLE `NEW_CREDIT` (
  `transaction_id` varchar(30) NOT NULL,
  `area` varchar(6) DEFAULT NULL,
  `num` varchar(15) DEFAULT NULL,
  `product_id` varchar(60) DEFAULT NULL,
  `quantity` int(11) DEFAULT NULL,
  `purchase_date` datetime DEFAULT NULL,
  `create_date` datetime NOT NULL,
  `price` float(6,3) DEFAULT NULL,
  `md5` varchar(130) NOT NULL,
  `test` tinyint(2) DEFAULT NULL,
  `status` smallint(6) DEFAULT NULL,
  `gift` float(5,2) DEFAULT '0.00',
  `packageName` varchar(80) DEFAULT NULL,
  `token` varchar(200) DEFAULT NULL,
  `tokenmd5` varchar(35) DEFAULT NULL,
  `type` int(3) DEFAULT NULL,
  `uid` varchar(30) DEFAULT NULL,
  PRIMARY KEY (`md5`,`create_date`,`tokenmd5`),
  KEY `credit_uid` (`uid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 
PARTITION BY RANGE (TO_DAYS(create_date))
(partition min values less than (TO_DAYS('2018-07-25')),
partition p20180725 values less than (TO_DAYS('2018-07-26')),
partition p20180726 values less than (TO_DAYS('2018-07-27')),
partition p20180727 values less than (TO_DAYS('2018-07-28')),
partition p20180728 values less than (TO_DAYS('2018-07-29')),
partition p20180729 values less than (TO_DAYS('2018-07-30')),
partition p20180730 values less than (TO_DAYS('2018-07-31')),
partition p20180731 values less than (TO_DAYS('2018-08-01')),
partition p20180801 values less than (TO_DAYS('2018-08-02')),
partition p20180802 values less than (TO_DAYS('2018-08-03')),
partition p20180803 values less than (TO_DAYS('2018-08-04')),
partition p20180804 values less than (TO_DAYS('2018-08-05')),
partition p20180805 values less than (TO_DAYS('2018-08-06')),
partition p20180806 values less than (TO_DAYS('2018-08-07')),
PARTITION pmax VALUES LESS THAN MAXVALUE
);

  ②rename表名，新表投入使用，旧表暂停
  rename table CREDIT to CREDIT_bak;
  rename table NEW_CREDIT to CREDIT;
  
  ③备份旧表
  mysqldump -utw_textfun -ptw_textfun@1407 tw_textfun CREDIT_BAK > CREDIT.sql
  scp -r -P 14070 CREDIT.sql admin@45.79.68.224:/smsfile
  登录backup1查看：ssh admin@45.79.68.224 -p14070  / admin@1407#XN
  
  ④创建存储过程，自动分区
  drop procedure if exists CallFree_CREDIT_Set_Partition;
  DELIMITER //
  create procedure CallFree_CREDIT_Set_Partition()
  begin
    declare v_part VARCHAR(10);  
    declare v_days INT;
 
    declare exit handler for sqlexception rollback;
    start TRANSACTION;

    SELECT partition_description,partition_name into v_days,v_part from information_schema.partitions where table_schema = schema() and partition_name like 'p20%' and table_name='CREDIT' order by partition_description desc limit 1;
 
    SET @v_newpart=DATE_FORMAT(FROM_DAYS(v_days), "%Y%m%d");
    SET @v_newdays=v_days+1;
 
    SET @usql=concat('ALTER TABLE CREDIT REORGANIZE PARTITION pmax INTO (PARTITION p',@v_newpart,' VALUES LESS THAN (',@v_newdays,'),partition pmax VALUES LESS THAN MAXVALUE);');
 
    PREPARE stmt2 FROM @usql;
    EXECUTE stmt2;
    DEALLOCATE PREPARE stmt2;
    COMMIT;
  end
  //
  DELIMITER ;
 
  ⑤创建计划任务，定时执行分区
  select now();
  //SHOW VARIABLES LIKE 'event_scheduler';
  //set global event_scheduler =1;

  DROP EVENT IF EXISTS e_CallFree_CREDIT_Set_Partition;
  CREATE EVENT e_CallFree_CREDIT_Set_Partition 
  ON SCHEDULE EVERY 1 day STARTS TIMESTAMP '2018-08-03 09:07:00'  
  ON COMPLETION PRESERVE 
  DO 
	  call CallFree_CREDIT_Set_Partition();
  
  ⑥将旧表中最近一周的数据填充至新表中，耗时估计5分钟。
  insert into CREDIT select * from CREDIT_BAK where create_date > '2018-07-30 00:00:00';
  #测试：insert into NEW_CREDIT select * from CREDIT where create_date > '2018-01-13 00:00:00';
  #结果：72w条数据用时3 min 2.10 sec
  
  ⑦陆续将最近5个月的数据（月700w条数据）导入至新表中。耗时无法预估。
  ⑧删除旧表。 
