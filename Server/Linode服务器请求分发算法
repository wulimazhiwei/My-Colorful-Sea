# 算法 Algorithm
1、Round Robin：轮询调度算法(Round-Robin Scheduling)
轮询调度算法的原理是每一次把来自用户的请求轮流分配给内部中的服务器，从1开始，直到N(内部服务器个数)，然后重新开始循环。

算法的优点：是其简洁性，它无需记录当前所有连接的状态，所以它是一种无状态调度。
算法的缺点：
轮询调度算法假设所有服务器的处理性能都相同，不关心每台服务器的当前连接数和响应速度。当请求服务间隔时间变化比较大时，
轮询调度算法容易导致服务器间的负载不平衡。

所以此种均衡算法适合于服务器组中的所有服务器都有相同的软硬件配置并且平均服务请求相对均衡的情况。

2、Least Connection：最少连接数调度算法(Least Connection Scheduling)
最少连接数均衡算法对内部中需负载的每一台服务器都有一个数据记录，记录当前该服务器正在处理的连接数量，当有新的服务连接请求时，
将把当前请求分配给连接数最少的服务器，使均衡更加符合实际情况，负载更加均衡。该算法要求各个服务器的配置、性能相同。

与轮询调度算法想反，最小连接调度是一种动态调度算法，它通过服务器当前所活跃的连接数来估计服务器的负载情况。
调度器需要记录各个服务器已建立连接的数目，当一个请求被调度到某台服务器，其连接数加1;当连接中止或超时，其连接数减一。

3、Source IP： 源IP
调制客户端的IP，以便在后续请求中将它们分配给相同的后端。只要后端Linode集不会更改，此操作就会起作用，但Session Stickiness会影响此行为。

# 会话粘性 Session Stickiness
None - 不会执行额外的会话粘性。
Table -  NodeBalancer本身会记住给定客户端IP最初负载均衡的后端，并将来自此IP的后续请求路由回相同的后端，而不管健康后端节点数量的变化。
         表格中的每个条目将从添加时间起30分钟后到期。如果后端节点脱机，则删除该节点的表中的条目。
HTTP Cookie  - 要求将配置协议设置为HTTP。 NodeBalancer设置一个名为NB_SRVID的cookie，用于标识客户端最初负载均衡的后端，
               并将后续请求从此IP路由回相同的后端，而不管健康后端节点数量的变化。如果后端节点脱机，则客户端与另一个后端保持平衡，并重写cookie。

如果您需要会话持久性，我们建议尽可能将Source IP算法与Table或HTTP Cookie结合使用。
